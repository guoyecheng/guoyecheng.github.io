<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>“等级保护测评” on 暮色木木木木木</title>
    <link>https://www.appso.top/tags/%E7%AD%89%E7%BA%A7%E4%BF%9D%E6%8A%A4%E6%B5%8B%E8%AF%84/</link>
    <description>Recent content in “等级保护测评” on 暮色木木木木木</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ch</language>
    <lastBuildDate>Wed, 03 Jul 2019 16:44:13 +0800</lastBuildDate>
    
	<atom:link href="https://www.appso.top/tags/%E7%AD%89%E7%BA%A7%E4%BF%9D%E6%8A%A4%E6%B5%8B%E8%AF%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux系统安全基线配置</title>
      <link>https://www.appso.top/posts/2/</link>
      <pubDate>Wed, 03 Jul 2019 16:44:13 +0800</pubDate>
      
      <guid>https://www.appso.top/posts/2/</guid>
      <description>背景缘由 公司被要求对系统进行等级保护测评，经过初步测评，服务器linux系统基线配置有问题
共享账号检查 用户账号分配检查，避免共享账号存在
要求：
 按实际用户分配账号 避免不同用户间共享账号，避免用户账号和服务器间通信使用的账号共享  操作：
cat /etc/passwd ，查看当前所有用户的情况，与管理员确认是否有共享账户的情况。 如果有共享账户需要建立新账户
useradd username [...] passwd username  多余账户锁定 锁定多余的与设备运行维护无关的账号，比如test,www,demon账号等。。
要求：
应锁定与设备运行、维护等工作无关的账号
操作：
cat /etc/passwd ，查看哪些账户的shell域中为nologin，看多余账户的shell域是否为nologin，如果不是修改为nologin或者通过passwd -l username
ssh远程登录限制 限制具备超级管理员权限的用户远程登录，远程执行管理员操作，应该先一普通权限用户远程登录后，在切换到超级管理管理员权限账号执行相应操作
操作：
禁用root用户原厂登录，修改/etc/ssh/sshd_config文件，将PermitRoorLogin yes改为PermitRootLogin no,重启sshd服务
vim /etc/ssh/sshd_config #修改配置文件 service sshd restart  设置口令复杂度 口令长度至少12位，并包含数字，大小写字母和特殊符号
linux 系统中对应的密码策略模块有： pam_passwdqc和pam_qwquality。其中pam_passwdqc模块对应的是/etc/login.defs，pam_pwdquality对应的是对应的是/etc/security/pwquality.conf
方法一 查看cat /etc/pam.d/passwd，添加模块password required pam_pwquality.so
配置的方法有两种
 直接在/etc/pam.d/passwd中添加 password required pam_pwquality.so dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1 minlen=12 添加到/etc/security/pwquality.conf 中  参数解释：
 retry=N：定义登录/修改密码失败时，可以重试的次数； Difok=N：定义新密码中必须有几个字符要与旧密码不同。但是如果新密码中有1/2以上的字符与旧密码不同时，该新密码将被接受； minlen=N：定义用户密码的最小长度； dcredit=N：定义用户密码中必须包含多少个数字； ucredit=N：定义用户密码中必须包含多少个大写字母； lcredit=N：定义用户密码中必须包含多少个小些字母； ocredit=N：定义用户密码中必须包含多少个特殊字符（除数字、字母之外）； 其中 =-1表示，至少有一个  方法二 修改配置文件 /etc/pam.</description>
    </item>
    
    <item>
      <title>Linux利用GoogleAuthenticator实现双因子认证</title>
      <link>https://www.appso.top/posts/1/</link>
      <pubDate>Fri, 28 Jun 2019 17:41:26 +0800</pubDate>
      
      <guid>https://www.appso.top/posts/1/</guid>
      <description>一. 背景缘由 公司被要求对系统进行等级保护测评，经过初步测评，需要对服务器添加双因子认证。通过了解，测评员推荐说使用谷歌认证器来实现。
二. 介绍：什么是双因素认证 双因素身份认证就是通过你所知道再加上你所能拥有的这二个要素组合到一起才能发挥作用的身份认证系统。双因素认证是一种采用时间同步技术的系统，采用了基于时间、事件和密钥三变量而产生的一次性密码来代替传统的静态密码。每个动态密码卡都有一个唯一的密钥，该密钥同时存放在服务器端，每次认证时动态密码卡与服务器分别根据同样的密钥，同样的随机参数（时间、事件）和同样的算法计算了认证的动态密码，从而确保密码的一致性，从而实现了用户的认证。
说白了，就像我们几年前去银行办卡送的口令牌，以及网易游戏中的将军令，在你使用网银或登陆游戏时会再让你输入动态口令的。
三. 产品分类 市面上有基于硬件的，也有基于软件的产品，具体可以另搜啊，本人喜欢开源的东东，并找到了Google开源的二次认证系统Google Authenticator OpenSource，可以利用智能手机生产30秒动态口令配合登陆linux系统，该验证器提供了一个六位数的一次性密码。目前ios 和Android 都有客户端供于下载。
四. 实现目标 1.实现登陆linux 服务器时，先输入动态口令，认证成功后，在下一步输入用户密码。如果口令失败，不会进行下一步的本地密码认证。
2.部署完成后，即使服务器不能上网，或者手机客户端不能上网，整个二步验证系统还是可以正常运行的。
五. 基础+部署步骤 基本环境 centos 7.2  所需软件  chrony pam-devel libpam-google-authenticator qrencode libpng libpng-devel  部署安装 安装开发者工具 主要后续需要编译，这有gcc等编译器，以及需要用到的库 安装开发者工具和pam
[root@test ~]# yum groupinstall &amp;quot;Development Tools&amp;quot; -y [root@test ~]# yum install pam-devel -y  安装chrony软件 因为动态口令再验证时用到了时间，所以要保持时间上的一致性。简单说下chrony：chrony 是网络时间协议的（NTP）的另一种实现，与网络时间协议后台程序（ntpd）不同，它可以更快地更准确地同步系统始终。如果要使用ntp 需要单独安装
yum install chrony -y vim /etc/chrony.conf ... server 2.cn.pool.ntp.org iburst #重启服务并实用命令查看同步 service chronyd restart chronyc sources #如果时区不对的话，可以拷贝你当前地区所在地的时区到系统运行的时区，如下： cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  安装谷歌认证器 [root@test ~]# git clone https://github.</description>
    </item>
    
  </channel>
</rss>